"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DReaction = void 0;
const index_js_1 = require("../../index.js");
const Method_js_1 = require("./Method.js");
/**
 * @category Decorator
 */
class DReaction extends Method_js_1.Method {
    _emoji;
    _description;
    _directMessage;
    _guilds;
    _botIds;
    _aliases;
    _remove;
    _partial;
    get aliases() {
        return this._aliases;
    }
    set aliases(value) {
        this._aliases = value;
    }
    get botIds() {
        return this._botIds;
    }
    set botIds(value) {
        this._botIds = value;
    }
    get guilds() {
        return this._guilds;
    }
    set guilds(value) {
        this._guilds = value;
    }
    get directMessage() {
        return this._directMessage;
    }
    set directMessage(value) {
        this._directMessage = value;
    }
    get emoji() {
        return this._emoji;
    }
    set emoji(value) {
        this._emoji = value;
    }
    get description() {
        return this._description;
    }
    set description(value) {
        this._description = value;
    }
    get remove() {
        return this._remove;
    }
    set remove(value) {
        this._remove = value;
    }
    get partial() {
        return this._partial;
    }
    set partial(value) {
        this._partial = value;
    }
    constructor(emoji, aliases, botIds, description, directMessage, guilds, remove, partial) {
        super();
        this._emoji = emoji;
        this._description = description ?? this.emoji;
        this._directMessage = directMessage ?? true;
        this._guilds = guilds ?? [];
        this._botIds = botIds ?? [];
        this._aliases = aliases ?? [];
        this._remove = remove ?? true;
        this._partial = partial ?? false;
    }
    static create(emoji, aliases, botIds, description, directMessage, guilds, remove, partial) {
        return new DReaction(emoji, aliases, botIds, description, directMessage, guilds, remove, partial);
    }
    isBotAllowed(botId) {
        if (!this.botIds.length) {
            return true;
        }
        return this.botIds.includes(botId);
    }
    async getGuilds(client) {
        const guilds = await (0, index_js_1.resolveIGuilds)(client, this, [
            ...client.botGuilds,
            ...this.guilds,
        ]);
        return guilds;
    }
    async isGuildAllowed(client, guildId) {
        if (!guildId) {
            return true;
        }
        const guilds = await this.getGuilds(client);
        if (!guilds.length) {
            return true;
        }
        return guilds.includes(guildId);
    }
    parseParams() {
        return [];
    }
}
exports.DReaction = DReaction;
//# sourceMappingURL=DReaction.js.map